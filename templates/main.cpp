//code explosion:
// a significant increase in the size of compiled code
//generated by excessive use of template metaprogramming or inline functions
#include <iostream>
#include <string>
#include <vector>

template<typename T>
class stack {
public:
    friend auto operator<<(std::ostream& os, const stack& s) -> std::ostream& {
        for (const auto& i : s.stack_) {
            os << i << " ";
        }
        return os;
    }
    auto push(T const& item) -> void;
    auto pop() -> void;
    auto top() -> T&;
    auto top() const -> const T&;
    auto empty() const -> bool;
private:
    std::vector<T> stack_;
};

template<typename T> 
auto stack<T>::push(T const& item) -> void {
    stack_.push_back(item);
}

template<typename T>
auto stack<T>::pop() -> void {
    stack_.pop_back();
}

template<typename T>
auto stack<T>::top() -> T& {
    return stack_.back();
}

template<typename T>
auto stack<T>::top() const -> T const& {
    return stack_.back();
}

template<typename T>
auto stack<T>::empty() const -> bool {
    return stack_.empty();
}


int main() {
    stack<int> s1;
    s1.push(1);
    s1.push(2);
    stack<int> s2 = s1;
    std::cout << s1 << s2 << std::endl;
    s1.pop();
    s1.push(3);
    std::cout << s1 << s2 << std::endl;
    //s1.push("string");
    stack<std::string> string_stack;
    string_stack.push("string");
}